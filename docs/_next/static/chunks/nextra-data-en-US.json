{"/":{"title":"Likianta Code Snippet Book","data":{"":"Craft your fancy works with the loved code snippets.\n\nYou can find all examples in the navigation bar on the top-right.\nUse ctrl + k to search in full-text."}},"/python/get-func-source":{"title":"Get Function Source","data":{"":"requirements:\nastunparse\n\n# for test\nastpretty\nlk-logger\nget_func_source.py:\nimport ast\nimport inspect\nfrom astunparse import unparse\n\ndef get_source(\nfunc,\nstrip_decorators=True,\nstrip_signature=False,  # aka. body_only\nstrip_return=False,\n) -> str:\n\"\"\"\nhttps://stackoverflow.com/a/57040815\nnotice: if either `strip_decorators` or `strip_signature` is True, the\noutput code may slightly changed by removing *unnecessary* line breaks.\n\"\"\"\ncode: str = inspect.getsource(func)\nif strip_decorators or strip_signature:\nmodule = ast.parse(code)\ntarget_func = module.body[0]\nif strip_decorators:\ntarget_func.decorator_list.clear()\nif strip_return:\n# FIXME: support only stripping final-line return\nif target_func.body and isinstance(\ntarget_func.body[-1],\nast.Return\n):\ntarget_func.body.pop()\nif strip_signature:\nbody = target_func.body\nout = unparse(body)\nelse:\nout = unparse(target_func)\nelse:\nout = code\nreturn out.strip()\ntest:\nimport lk_logger\nfrom get_func_source import get_source\n\nlk_logger.setup(\nshow_source=False,\nshow_funcname=False,\n)\n\ndef decor(func):\nreturn func\n\n@decor\ndef aaa(\nbbb: int,\nccc: bool = False,\n) -> tuple:\nprint(bbb)\nprint(ccc)\nreturn (\nbbb,\nccc,\n)\n\nif __name__ == '__main__':\nprint(':di', 'source code')\nprint(get_source(aaa, strip_decorators=False))\nprint(':di', 'strip decorators')\nprint(get_source(aaa, strip_decorators=True))\nprint(':di', 'body only')\nprint(get_source(aaa, strip_decorators=True, body_only=True))\nthe output:"}}}